
Reduxï¼š
    a predictable 
    state container 
    for JS apps.
    A state management library.
    
    Models the app. state as 
    a Single JS Obj.
    
    helps you write applications that 
    
        1. behave consistently, 
        
        2. run in different environments (client, server, and native), 
        
        3. easy to test.
        
// Redux is not only made for React, 
// but it is a good pair to use with React.

        
When to use Redux

    1. Same piece of application state 
       needs to be mapped to 
       multiple 
       container components (share state).
       
    2. Too many props 
       are being passed through 
       multiple 
       parent-and-child components.
       
    3. To separate state out of components 
       for a better code structure.
    

3 Principles:

    1. Single 
       source of truth
    
       The state of your 
       whole application 
       is stored in 
       an object tree within 
       a single store.
       
       // the entire state of the application will be represented by 
       // one JS object.

    2. State 
       is 
       read-only 
    
       The only way 
       to change the state is to 
       emit / dispatch an action.
       
       // an action: 
          a plain JS object 
          describing the change.
          
       // In order to define the change, the action object usually 
          has a key 
          .type, 
       // which is just 
          a JS string 
          to indicate the change.
          e.g.
          {
            type: "LOGOUT_USER"
          }

    3. Changes 
       are made with 
       pure functions 
    
       To specify how the state tree is transformed by actions, 
       you write 
       pure reducers.
       
       // When writing a reducer, if state is not defined, return an initial state.
       
       Reducer 
          is the function 
          knowing how to return 
          a new state 
          based on the action it receives.
       
       // to describe the logic of how to change the state 
       // you have to write a function 
       // that takes 1. the previous state of the app 
       // and 2. the action being dispatched, 
       // then returns 
       // the next/new state of the app. 
       e.g. 
       function rootReducer(state, action) {
         switch(action.type) {
           ...
         }
       }
       
       Pure functions 
           are those whose return values 
           depend only upon 
           the values of their arguments.
       
       // Pure functions also 
       // do not override the values of anything.
       
        e.g.
        function square(x) {
          return x * x;
        }
        function squareAll(items) {
          return items.map(square);
          // a new array is returned 
          // instead of modifying the items that was passed in.
        }
        // map() calls a provided callback function once for each element in an array, 
        // in order, and constructs a new array from the results.
        // review: A callback function is a function passed into another function as an argument, 
        //         which is then invoked inside the outer function to complete some kind of routine or action.
        
        // "Impure" functions, e.g.
        // database calls, or overriding.
        
// https://medium.com/@jamesjefferyuk/javascript-what-are-pure-functions-4d4d5392d49c


// only a single store in a Redux application. 

    Store:

        binds together the 3 principles of Redux:

            1. Holds the current application state object
            
            2. Allows you to dispatch actions
            
            3. When you create it, you need to specify the reducer that tells how state is updated with actions.
        
        // e.g.
        // import {createStore} from 'redux';
        // // write the counter reducer here.
        // const store = createStore(counter);
    
        has 3 important methods:
        
         1. getState()
           retrieves the current state of the Redux store.
           e.g.
           const newState = store.getState();
           
         2. dispatch()
           how we dispatch actions to change the state of the application.
           // the Only way to change the state.
           e.g.
           store.dispatch({
             type: "LOGOUT_USER"
           });
           
         3. subscribe()
           registers a callback that the redux store will call 
           any time an action has been dispatched 
           so you can update the UI of your application 
           to reflect the current application state.


Redux provides a utility function called 

    combineReducers()
which helps each of reducers 
manage its own part of the global state. 
The state parameter 
is different for every reducer, 
and corresponds to the part of the state it manages.
    // handles different part 
       of a single store 
       instead of many stores.
       
// e.g.
    const rootReducer = combineReducers({potato: potatoReducer, tomato: tomatoReducer});
    
    // This would produce the following 
    // ******
    // state object
    // ******
    
    // then you can use state.potato & state.tomato
    // in mapStateToProps()
    
    {
      potato: {
        // ... potatoes, and other state managed by the potatoReducer ... 
      },
      tomato: {
        // ... tomatoes, and other state managed by the tomatoReducer ...
      }
    }


react-redux: 

    an official 
    binding/integrating library 
    to use Redux with React.
    
use a special 
Component <Provider> 
from react-redux, to magically 
make the store available to 
all React Components 
in the application
without 
passing it every time. 

    Only need to use it 
    Once 
    when render 
    the root Component.
e.g.
    import ...;
    const store = createStore(rootReducer);
    ReactDOM.render(
        <Provider store={store}>
            <App />
        </Provider>,
        document.getElementById('root')
    );

connect our App Component with Redux using 
    connect() // func. 
    // Wrapping a component
from react-redux:


To use connect(), you need to define a special function called 
    mapStateToProps() 
that tells how to transform the current Redux store state 
into the props 
you want to pass to 
a presentational/stateless component 
you are wrapping.
e.g.
    import ...;
    const BoldName = ({name}) => (<strong>{name}</strong>);
    const mapStateToProps = state => ({ name: state.name });
    export default connect(mapStateToProps, null)(BoldName);

In addition to reading the state, 
components can dispatch actions. 
In a similar fashion, you can define a function called 
    mapDispatchToProps() 
that receives the dispatch() method 
and returns callback props 
that you want to inject into 
the presentational/stateless component.


// the stateful component: 
    container component.
// the stateless component: 
    presentational component.


3 main Reasons for 
using Action Creator:

// Action creator is functions that create actions.

1. Basic abstraction: 
    
    Rather than writing action type strings 
    in every component 
    that needs to create the same type of action, 
    put the logic for creating that action 
    in one place.

2. Documentation: 
    
    The params of the function 
    act as a guide 
    for what data is needed to go into the action.

3. Code separation: 
    
    Consistently using action creators means that a component 
    doesn't have to know any of 
    the details 
    of creating and dispatching the action.

Redux - Thunk (redux-thunk)
    Middleware used to handle Async actions in Redux.
    Allows you to write action creators that 
        return a func.
        instead of an action,
        which give you the access to 
        store.getState() and store.dispatch() 
        inside the func.
    e.g.
    const store = createStore(reducer, applyMiddleware(thunk));

General Data Loading with Redux:
    //
    Component gets rendered onto the screen
    
    Component's 'componentDidMount()' gets called
    
    Call action creator from 'componentDidMount()'
    // 
    Action creator runs code to make an API req.
    
    API responds with data
    
    Action creator returns an 'action' with the fetched data
    on the 'payload' property
    // 
    Some reducer sees the 'action', 
    returns the data off the 'payload'
    
    Since some new state obj. is generated,
    redux/react-redux cause React App to be 
    re-rendered.

Middleware in Redux:
    Function that gets called 
    with every action dispatch.
use
Redux-Thunk 
to solve 
Async 
issues.

Steps for Setting up OAuth:

    Create a new project at console.developers.google.com/
    Set up OAuth confirmation screen;
    Generate an OAuth Client ID;
    Install Google's API library, initialize it with the OAuth Client ID;
    Make sure the lib gets called any time the user clicks on the 'Login with Google' button.

https://developers.google.com/api-client-library/javascript/reference/referencedocs

const auth = gapi.auth2.getAuthInstance()
auth.signIn()
auth.isSignedIn.get()


