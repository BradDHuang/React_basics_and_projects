
// this file contains notes about React for review purpose.

// https://reactjs.org/docs/react-api.html#reactchildren

React is the entry point to the React library. 
If you load React from a <script> tag, these top-level APIs are available on the React global. 

If you use ES6 with npm, you can write 
import React from 'react'. 
// If you use ES5 with npm, you can write var React = require('react').

React components 
let you split the UI into independent, 
reusable pieces, 
and think about each piece in isolation. 
// React components can be defined by subclassing React.Component or React.PureComponent.

// React.PureComponent is similar to React.Component. 
// The difference between them is that React.Component doesn’t implement shouldComponentUpdate(), 
// but React.PureComponent implements it with a shallow prop and state comparison.

// If your React component’s render() function renders the same result given the same props and state, 
// you can use React.PureComponent for a performance boost in some cases.

React.Component 
is the base class 
for React components when they are defined using ES6 classes:
// e.g.
// use an ES6 class to define a component:
    class Greeting extends React.Component {
      render() {
        return <h1>Hello, {this.props.name}</h1>;
      }
    }
// or, use a simpler way to define a component:
    function HelloWorld(props) {
      return <h1>Hello World</h1>;
    }
    
// render the component in order to see the result.
// e.g.
    ReactDOM.render(<App />, document.getElementById('root'));
    // call ReactDOM.render() with the <App /> component, 
    // to render <App /> inside <div id="root"></div>.

// A React component is simply a JavaScript class that requires the render function to be declared. 
// The render function simply outputs HTML code, which is implemented using either JSX. 
// A React component may also require additional functions for handling data, actions and lifecycle events.

React components are like JavaScript functions. 
They accept arbitrary inputs (called “props”) 
and return React elements describing what should appear on the screen.

A stateless component’s work is simply to display data that it receives from its parent React component. 
// It can also receive events and inputs, which it passes up to its parent to handle. 

A React container or stateful component does the work of rendering one or more child components. 
// It fetches data from external sources and feeds it to its child components. 
// It also receives inputs and events from them in order to initiate actions.

// React uses JSX syntax for templating the view 
// instead of regular Javascript. 
// It is a syntax extension to JavaScript. 

// JSX produces React “elements”. 

using JSX 
to describe what your UI should look like. 
// Each JSX element is just syntactic sugar for calling React.createElement(). 

// The only place to use JSX is 
// in the return of the render function inside a react component.

// If we want to return more elements, we need to wrap it 
// with one container element. 

// The HTML Tag have to be closed, JSX requires that every tag should be closed.

// Since JSX is closer to JavaScript than to HTML, 
// React DOM uses camelCase property naming convention 
// instead of HTML attribute names.
// For example, class becomes className in JSX, and tabindex becomes tabIndex.

// https://reactjs.org/docs/dom-elements.html

// You can embed any JavaScript expression in JSX 
// by wrapping it in curly braces.
// You can not use Javascript expresssions that require curly braces in syntax, 
// like if, for, while, switch.
// But we can use conditional expressions.

// Inline Style
The style attribute accepts a JavaScript object with camelCased properties rather than a CSS string.


React provides several APIs for manipulating elements:
    cloneElement()
        // Clone and return a new React element using element as the starting point. 
        // The resulting element will have the original element’s props with the new props merged in shallowly. 
        // New children will replace existing children. 
    isValidElement()
    React.Children
    
React.Children provides utilities for dealing with the this.props.children opaque data structure.
// this.props.children — a special prop that is passed to components automatically.
// https://learn.co/lessons/react-this-props-children

React.Children.map(children, function[(thisArg)])

Invokes a function on every immediate child contained within children with this set to thisArg. 
// If children is an array it will be traversed and the function will be called for each child in the array. 
    

React & its features:
    React is a JS library for building UIs.
    
    React is designed around the concept of 
    reusable components. 
    
    In React, we describe UIs using components. 
    
    React's name is the simple explanation of how Reacdt works. 
    When the input of a component changes, 
    the UI it represents (the output) changes automatically. 
    
    With React, we write HTML using JS. 
    
    React is fast.
    
    
// https://stackoverflow.com/questions/10075990/upgrading-node-js-to-latest-version
// e.g.
    nvm install v8.12.0
    node -v 
    // v8.12.0
    

Component Props
Props is shorthand for properties, 
and Props are 
    how components talk to each other 
    by passing values around.
    
For some applications, you can use JavaScript extensions 
like Flow or TypeScript 
to typecheck your whole application.

React has some built-in typechecking abilities. 
To run typechecking on the props for a component, 
you can assign the special propTypes property.
// npm install prop-types --save


The state of a React component 
is a place to store data inside the component. 
It is similar to a Javascript Object, 
but it is immutable.

// A component's state should be considered as private data. 

// Only Class Component has state, functional Component does not.

You can read the state anywhere inside the component by this.state
Since the state is immutable, we can not set the value like what we used to do for Javascript Object. 
Instead, there is a special function called 
setState() 
to set the state.

3 important principles of setting state:
    (1) Do not modify state directly, use setState() instead. 
        // The only place you can assign value to this.state is in the constructor.
    (2) setState() may be Async.
    (3) State updates are merged.
    

Handling Events
Handling events with React elements is very similar to handling events on DOM elements. 
There are some syntactic differences:
    React events are named using camelCase, rather than lowercase.
    With JSX you pass a function as the event handler, rather than a string.
    
    
axios 
is a Promise based 
HTTP client for the browser and node.js

How to use axios
    // options is a JS object
    axios(options)
      .then(response => {
        console.log(response);
      })
      .catch(err => {
        console.log(err);
      });


PureComponent 
is exactly the same as Component 
except that when props or state changes, 
PureComponent will do 
a shallow comparision 
on both props and state.

// A shallow comparision check 
means that JS only checks that the value’s object ids are the same, 
not that their content is the same. 
The id here means 
the memory address 
for where JS stores the information for that particular object.

All primitives are immutable, i.e., they cannot be altered. 
    var bar = 'baz';
    console.log(bar); // baz
    bar.toUpperCase();
    console.log(bar); // baz
    
    // Assignment gives the primitive a new (not a mutated) value
    bar = bar.toUpperCase(); 
    console.log(bar); // BAZ
    
// A primitive (primitive value, primitive data type) is data that is not an object and has no methods.

What will trigger re-rendering for React Component?
    Only state change will trigger componnet re-rendering. 
    Pure props changes cannot trigger re-rendering.
 
   
The <Route> component
It renders some UI if the current location matches the route’s path. 

// e.g. <Route exact={true} path="/" component={Home} />

The <Link> component 
is used to navigate between pages. 
It’s comparable to the HTML anchor element. 
// However, using anchor links would result in a browser refresh. 
use <Link> to navigate to a particular URL 
and have the view re-rendered 
without a browser refresh.

// e.g. <Link to="/about">About</Link>

the <Switch> component 
With <Switch>, only the 1st child <Route> that matches the location gets rendered.

// e.g. path="/users" & path="/:pageName"

// put the <Route> for "path=/:pageName" after "path=/users".

Every component which is in Routes component props has 3 more props by default: 
    match , 
    // e.g. match: {path: "/login", url: "/login", isExact: true, params: {…}}
        // match.params: 
            // An object containing key/value pairs from the URL 
            // e.g. <p>match.params: {JSON.stringify(match.params)}</p>
        // path - (string) The path pattern used to match. Useful for building nested <Route>s
        // url - (string) The matched portion of the URL. Useful for building nested <Link>s
            // Consider the route "/users/:userId". 
            // match.path would be "/users/:userId" while 
            // match.url would have the :userId value filled in, e.g. "users/5".
    location, 
    history.
If using the render syntax, the component won't have those 3 props, have to use 
withRouter() to get that.

// The render prop expects a function 
// that returns an element 
// when the location matches the route’s path.
    // e.g. "/users" is Not a match for path "/users/:userId", while "/users/1" is a match.

// e.g. <Route path="/" render={() => <Home />} />
        <Route
          path="/:pageName"
          render={props => <p>match.url: {props.match.url}</p>}
        />
Use withRouter() will give component history and the closest match and location.

// e.g. const WithRouterButton = withRouter(Button);


Protected Routes
// If someone tries to access /admin, they'd be required to log in first. 

<Redirect> 
will replace the current location in the history stack with a new location. 
// The new location is specified by the to prop.
// e.g.
    <Redirect to={{pathname: '/login', state: {from: props.location}}} />
    
// Or, use this.props.history.push() & withRouter() for protected routes.


// localStorage
    If we want React to keep its previous state or data 
    after refreshing the page. 
    We can use localStorage to solve this problem.
    // e.g.
    localStorage.getItem()
    localStorage.setItem()
    localStorage.removeItem()
    // localStorage can only store strings.


Composition vs Inheritance

React has a powerful composition model, 
and we recommend using composition 
instead of inheritance 
to reuse code between components.

Containment
Some components don’t know their children ahead of time. 
// This is especially common for components like Sidebar or Dialog that represent generic “boxes”.
We recommend that such components use the special 
children prop 
to pass children elements directly into their output.

Specialization
Sometimes we think about components as being “special cases” of other components. 
// For example, we might say that a WelcomeDialog is a special case of Dialog.
In React, this is also achieved by composition, 
where a more “specific” component renders a more “generic” one 
and configures it with props.

// Composition works equally well for components defined as classes.

// What About Inheritance?

Props and composition 
give you all the flexibility you need to customize a component’s look and behavior in an explicit and safe way. 

If you want to 
reuse non-UI functionality 
between components, we suggest 
extracting it into a separate JS module. 
The components may import it 
and use that function, object, or a class, 
without extending it.


Keys
A “key” is a special 
string attribute 
you need to include when creating lists of elements.
// e.g.
    <li key={number.toString()}>
      {number}
    </li>

Keys help React identify 
which items have changed, are added, or are removed. 
Keys should be given to the elements inside the array to give the elements 
a stable identity.

// The best way to pick a key is to use a string that uniquely identifies a list item among its siblings.
    // However they don’t need to be globally unique. 
    // We can use the same keys when we produce 2 different arrays.
// When you don’t have stable IDs for rendered items, 
// you may use the item index as a key.
// We don’t recommend using indexes for keys if the order of items may change. 
// If you choose not to assign an explicit key to list items then React will default to using indexes as keys.

// Keys only make sense in the context of the surrounding array.

// A good rule of thumb is that 
// elements inside the map() call need keys.

Keys serve as a hint to React 
but they don’t get passed to your components. 
If you need the same value in your component, 
pass it explicitly as a prop with a different name.
// e.g.
    <Post
        key={post.id}
        id={post.id}
    />
// the Post component can read props.id, but not props.key.

JSX allows embedding any expression in curly braces so we could inline the map() result.
// e.g.
    <ul>
      {numbers.map((number) =>
        <ListItem key={number.toString()}
                  value={number} />

      )}
    </ul>
// if the map() body is too nested, it might be a good time to 
// extract a component (extracting a variable for readability).
// e.g.
    const listItems = numbers.map(// ...);
    // ...
        <ul>
          {listItems}
        </ul>


What is the Virtual DOM?
    The virtual DOM (VDOM) is a programming concept 
    where an ideal, or “virtual”, representation of a UI 
    is kept in memory 
    and synced with the “real” DOM 
    by a library such as ReactDOM. 

This approach enables the declarative API of React: 
    You tell React what state you want the UI to be in, 
    and it makes sure the DOM matches that state.









