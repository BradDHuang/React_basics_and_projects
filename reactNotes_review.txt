
// this file contains notes about React for review purpose.

// https://reactjs.org/docs/react-api.html#reactchildren

React is the entry point to the React library. 
If you load React from a <script> tag, these top-level APIs are available on the React global. 

If you use ES6 with npm, you can write 
import React from 'react'. 
// If you use ES5 with npm, you can write var React = require('react').

React components 
let you split the UI into independent, 
reusable pieces, 
and think about each piece in isolation. 
// React components can be defined by subclassing React.Component or React.PureComponent.

// React.PureComponent is similar to React.Component. 
// The difference between them is that React.Component doesn’t implement shouldComponentUpdate(), 
// but React.PureComponent implements it with a shallow prop and state comparison.

// If your React component’s render() function renders the same result given the same props and state, 
// you can use React.PureComponent for a performance boost in some cases.

React.Component 
is the base class 
for React components when they are defined using ES6 classes:
// e.g.
// use an ES6 class to define a component:
    class Greeting extends React.Component {
      render() {
        return <h1>Hello, {this.props.name}</h1>;
      }
    }
// or, use a simpler way to define a component:
    function HelloWorld(props) {
      return <h1>Hello World</h1>;
    }
    
// render the component in order to see the result.
// e.g.
    ReactDOM.render(<App />, document.getElementById('root'));
    // call ReactDOM.render() with the <App /> component, 
    // to render <App /> inside <div id="root"></div>.

// A React component is simply a JavaScript class that requires the render function to be declared. 
// The render function simply outputs HTML code, which is implemented using either JSX. 
// A React component may also require additional functions for handling data, actions and lifecycle events.

React components are like JavaScript functions. 
They accept arbitrary inputs (called “props”) 
and return React elements describing what should appear on the screen.

A stateless component’s work is simply to display data that it receives from its parent React component. 
// It can also receive events and inputs, which it passes up to its parent to handle. 

A React container or stateful component does the work of rendering one or more child components. 
// It fetches data from external sources and feeds it to its child components. 
// It also receives inputs and events from them in order to initiate actions.

// React uses JSX syntax for templating the view 
// instead of regular Javascript. 
// It is a syntax extension to JavaScript. 

// JSX produces React “elements”. 

using JSX 
to describe what your UI should look like. 
// Each JSX element is just syntactic sugar for calling React.createElement(). 

// The only place to use JSX is 
// in the return of the render function inside a react component.

// If we want to return more elements, we need to wrap it 
// with one container element. 

// The HTML Tag have to be closed, JSX requires that every tag should be closed.

// Since JSX is closer to JavaScript than to HTML, 
// React DOM uses camelCase property naming convention 
// instead of HTML attribute names.
// For example, class becomes className in JSX, and tabindex becomes tabIndex.

// https://reactjs.org/docs/dom-elements.html

// You can embed any JavaScript expression in JSX 
// by wrapping it in curly braces.
// You can not use Javascript expresssions that require curly braces in syntax, 
// like if, for, while, switch.
// But we can use conditional expressions.

// Inline Style
The style attribute accepts a JavaScript object with camelCased properties rather than a CSS string.


React provides several APIs for manipulating elements:
    cloneElement()
        // Clone and return a new React element using element as the starting point. 
        // The resulting element will have the original element’s props with the new props merged in shallowly. 
        // New children will replace existing children. 
    isValidElement()
    React.Children
    
React.Children provides utilities for dealing with the this.props.children opaque data structure.
// this.props.children — a special prop that is passed to components automatically.
// https://learn.co/lessons/react-this-props-children

React.Children.map(children, function[(thisArg)])

Invokes a function on every immediate child contained within children with this set to thisArg. 
// If children is an array it will be traversed and the function will be called for each child in the array. 
    

React & its features:
    React is a JS library for building UIs.
    
    React is designed around the concept of 
    reusable components. 
    
    In React, we describe UIs using components. 
    
    React's name is the simple explanation of how Reacdt works. 
    When the input of a component changes, 
    the UI it represents (the output) changes automatically. 
    
    With React, we write HTML using JS. 
    
    React is fast.
    
    
// https://stackoverflow.com/questions/10075990/upgrading-node-js-to-latest-version
// e.g.
    nvm install v8.12.0
    node -v 
    // v8.12.0
    

Component Props
Props is shorthand for properties, 
and Props are 
    how components talk to each other 
    by passing values around.






















