

The <td> tag 
    defines a standard cell in an HTML table. 
    An HTML table has two kinds of cells: 
        Header cells - contains header information (created with the <th> element) 
        Standard cells - contains data (created with the <td> element)
      
        
&nbsp;        
Alternatively referred to as a fixed space or hard space, 
Non-Breaking SPace (NBSP) is used in programming, 
and word processing to create a space in a line that cannot be broken by word wrap. 
With HTML &nbsp; 
allows you to create multiple spaces that are visible on a web page and not only in the source code.


// return <p>{this.props.objectProps}</p>; // (at Text.js:13)
// const objectProps = {a: 1, b: 2, c: 3};
// return (
        <Text // (at App.js:89)
            objectProps={objectProps}
        />);
Objects are not valid as a React child (found: object with keys {a, b, c}). 
If you meant to render a collection of children, use an array instead.


React itself does not have any way to fetch data 
since it is just a view library to build web UI. 
In that case you need to use external libraries to do that.
e.g.
    axios
    axios is a promise based HTTP client for the browser and node.js, 
    and it is also one of the most popular and most common used library to send HTTP request in React.
    

The alt attribute 
    provides alternative information for an image if a user for some reason cannot view it.
    e.g.
    <img alt="info" />
    
The <thead> tag 
    is used to group header content (<th>) in an HTML table.
    

array literals:
    e.g.
    var parts = ['shoulders', 'knees']; 
    var lyrics = ['head', ...parts, 'and', 'toes']; 
    // ["head", "shoulders", "knees", "and", "toes"]
    
object literals:
    e.g.
    var obj1 = { foo: 'bar', x: 42 };
    var obj2 = { foo: 'baz', y: 13 };
    var clonedObj = { ...obj1 }; // Object { foo: "bar", x: 42 }
    var mergedObj = { ...obj1, ...obj2 }; // Object { foo: "baz", x: 42, y: 13 }
    

componentDidMount() 
    is invoked immediately after a component is mounted (inserted into the tree). 
    Initialization that requires DOM nodes should go here. 
If you need to load data from a remote endpoint, 
    this is a good place to instantiate the network request.
    
    
a test on 08/06/2018
var t = new Date();
t.setDate(0);
t.getDate(); // 31, it is of July.
t.setDate(32);
t.getDate(); // 1, it is of Aug.

Or, use moment.js
https://momentjs.com/


ref:
    ref provides a way to access DOM nodes 
        or React elements created in the render method.
        

import React, {PureComponent} from 'react';

PureComponent is exactly the same as Component except that 
    when props or state changes, PureComponent will do a 
    Shallow comparision on both props and state.
    
    
HOC:
    A higher-order component (HOC) is a function 
    that takes a component and returns a new component, for the concept of 
    reusable component.
    
    
React Router:

<Route />
<BrowserRouter />

import {BrowserRouter, Route} from 'react-router-dom';

e.g.
return (
  <BrowserRouter>
    <div>
      <Route path="/" component={Home} />
      <Route path="/about" component={About} />
      <Route path="/users" component={Users} />
    </div>
  </BrowserRouter>
);


import { Link } from 'react-router-dom';

e.g.
    <Link to="/">Home</Link>
    
Note: <Link> is Client-side Only, No browser Refresh.


exact={true}
    e.g.
    <Route exact={true} path="/" component={Home} />


import { Switch } from 'react-router-dom';

    e.g.
    <Switch>
        <Route exact={true} path="/" component={Home} />
        <Route path="/about" component={About} />
        <Route path="/users" component={Users} />
        <Route path="/:pageName" component={AnotherPage} />
    </Switch>
 
Note: <Switch> will Only render the 1st matched route.
      that is, routes' orders matter.
      
      
The history package: 
    a JS lib. that lets you easily manage session history anywhere JS runs.

With history, you can navigate across your browser history stack easily:

    history.push(path, [state]) // Pushes a new entry onto the history stack
    history.goBack() // go back one page
    history.goForward() // go forward one page
    
    
withRouter:

    You can have the access to the history object 
    in any React component inside <BrowserRouter> 
    via the withRouter HOC from React router.
    
Note: withRouter will have history for its props (props.history). 

import { withRouter } from 'react-router-dom';

e.g.
    // The Login component has this button:
    // <button onClick={ () => { props.history.push('/'); } }>Login</button>
    
    const WithRouterLogin = withRouter(Login);
    ...
    ...
    ...
    <Route path="/login" component={WithRouterLogin} />
    









